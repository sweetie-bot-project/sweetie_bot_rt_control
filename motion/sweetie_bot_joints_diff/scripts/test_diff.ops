import("rtt_ros");
ros.import("rtt_rospack");

# LOAD LOGGER
ros.import("sweetie_bot_logger");
require("log4cpp"); # add log4cpp service
log4cpp.default_root_category = "sweetie_bot.motion";
log4cpp.configure("herkulex_control.log4cpp"); # load configuration from file
ros.import("sweetie_bot_joints_diff");
ros.import("sweetie_bot_servo_inv");

loadComponent("file_timer", "OCL::TimerComponent");
file_timer.startTimer(1, 0.0224);

loadComponent("joints_diff","sweetie_bot::motion::JointsDiff");
setActivity("joints_diff", 0.0, 40, ORO_SCHED_RT);
joints_diff.period = 0.0224; # Important! Period is equal to timer configuration.
joints_diff.filter_position = 0;
joints_diff.calc_velocity = 1;
joints_diff.calc_acceleration = 1;

#joints_diff.filter = array();
joints_diff.d_filter = array(28.35706, -0.65906, -14.16119, -16.14705, -10.61439, -1.56094, 7.01555, 11.11735, 6.74673, -10.09407);
joints_diff.d2_filter = array(529.604, -116.141, -380.943, -369.329, -185.826, 65.039, 278.739, 350.747, 176.535, -348.424);


# Simple trajectory player
loadComponent("file_player","sweetie_bot::PlayerJointState");
setActivity("file_player", 0.0, 40, ORO_SCHED_RT);
file_player.file_name = "test_ref1.in";
file_player.joint_names = strings("servo1", "servo2");
file_player.effort_presents = true;

# SETUP COMPONENT CONNECTIONS

# sync pulses for both components
connect("file_timer.timer_1", "file_player.sync", ConnPolicy());
connect("file_timer.timer_1", "joints_diff.sync_step", ConnPolicy());

connect("file_player.out_joints_fixed", "joints_diff.in_joints_fixed", ConnPolicy());
# CONFIGURE
file_player.configure

joints_diff.start

loadComponent("reporter_input", "OCL::FileReporting");
setActivity("reporter_input", 0.0, 40, ORO_SCHED_RT);
reporter_input.WriteHeader = 0;
reporter_input.ComplexDecompose = 1;
reporter_input.ReportFile = "input.out";
reporter_input.Synchronize = 1;
addPeer("reporter_input", "file_player");
reporter_input.reportPort("file_player", "out_joints_fixed");

loadComponent("reporter_output", "OCL::FileReporting");
setActivity("reporter_output", 0.0, 40, ORO_SCHED_RT);
reporter_output.WriteHeader = 0;
reporter_output.ComplexDecompose = 1;
reporter_output.ReportFile = "output.out";
reporter_output.Synchronize = 1;
addPeer("reporter_output", "joints_diff");
reporter_output.reportPort("joints_diff", "out_joints_accel_fixed");

reporter_input.start
reporter_output.start

# experiment
file_player.start

file_timer.wait(2, 30);

# stop
file_player.stop
reporter_input.stop
reporter_output.stop
joints_diff.stop
