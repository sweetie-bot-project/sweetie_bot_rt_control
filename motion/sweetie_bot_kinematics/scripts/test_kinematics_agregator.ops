# Загрузка поддержки взаимодействия с ROS
import("rtt_ros");
ros.import("rtt_rospack");
ros.import("sweetie_bot_logger");
ros.import("rtt_sensor_msgs")
ros.import("rtt_sweetie_bot_kinematics_msgs");

ros.import("rtt_rospack");  # Разрешение путей ROS: операци ros.find(<package name>)
ros.import("rtt_rosparam");

require("print");
import("sweetie_bot_robot_model");
import("sweetie_bot_agregator");
import("sweetie_bot_kinematics");

# Logger
require("log4cpp");
loadService("Deployer", "log4cpp"); # add log4cpp service
log4cpp.default_root_category = "sweetie_bot.motion";
log4cpp.configure(ros.find("sweetie_bot_kinematics") + "/scripts/config.log4cpp"); # load configuration from file
log4cpp.addRosAppender("sweetie_bot", 20); # redirect sweetie_bot to /rosout

loadComponent("sweetie_bot_agregator", "sweetie_bot::motion::Agregator");
loadService("sweetie_bot_agregator","rosparam");
loadService("sweetie_bot_agregator","marshalling"); # Поддержка исполнения скриптов и загрузки xml/cpf файлов

# Create ROS mapping
stream("sweetie_bot_agregator.in_joints", ros.topic("/agregator/input_joint_state"));
stream("sweetie_bot_agregator.out_joints_sorted", ros.topic("/agregator/output_joint_state"));

# Загружаем параметры из xml файла.
sweetie_bot_agregator.marshalling.loadServiceProperties(ros.find("sweetie_bot_proto2_deploy") + "/default/kinematic_chains.cpf","robot_model");
sweetie_bot_agregator.rosparam.getParam("/", "robot_model");


loadComponent("sweetie_bot_kinematics", "sweetie_bot::motion::KinematicsInvTracIK");
loadService("sweetie_bot_kinematics","robot_model"); # предоставяет robot_model сам себе
loadService("sweetie_bot_kinematics","rosparam");
loadService("sweetie_bot_kinematics","marshalling"); # Поддержка исполнения скриптов и загрузки xml/cpf файлов
connectServices("sweetie_bot_kinematics", "sweetie_bot_kinematics");

# Загружаем параметры из xml файла.
sweetie_bot_kinematics.marshalling.loadServiceProperties(ros.find("sweetie_bot_proto2_deploy") + "/default/kinematic_chains.cpf","robot_model");
sweetie_bot_kinematics.rosparam.getParam("/", "robot_model");
sweetie_bot_kinematics.robot_model.configure();

# forward kinematics
loadComponent("sweetie_bot_kinematics_fwd", "sweetie_bot::motion::KinematicsFwd");
connectServices("sweetie_bot_kinematics_fwd", "sweetie_bot_kinematics")
sweetie_bot_kinematics_fwd.kinematic_chains = strings("leg1","leg2")

# Create ROS mapping
stream("sweetie_bot_kinematics.in_joints_seed_sorted", ros.topic("/kinematics/input_joint_seed"));
stream("sweetie_bot_kinematics_fwd.in_joints_sorted", ros.topic("/kinematics/input_joint_state"));
stream("sweetie_bot_kinematics.in_limbs", ros.topic("/kinematics/input_limb_state"));
stream("sweetie_bot_kinematics.out_joints", ros.topic("/kinematics/output_joint_state"));
stream("sweetie_bot_kinematics_fwd.out_limbs_fixed", ros.topic("/kinematics/output_limb_state"));
#connect( "sweetie_bot_kinematics.out_joints", "sweetie_bot_agregator.in_joints", ConnPolicy() );
connect( "sweetie_bot_agregator.in_joints", "sweetie_bot_kinematics.out_joints", ConnPolicy() );

sweetie_bot_agregator.configure();
sweetie_bot_agregator.start();

sweetie_bot_kinematics.configure();
sweetie_bot_kinematics.start();

sweetie_bot_kinematics_fwd.configure();
sweetie_bot_kinematics_fwd.start();
